'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Form, FormField, FormItem, FormControl, FormMessage } from '@/components/ui/form';

const MIN_AGE = 16;
const currentDate = new Date();
const minBirthDate = new Date(
  currentDate.getFullYear() - MIN_AGE,
  currentDate.getMonth(),
  currentDate.getDate(),
);

const formSchema = z.object({
  lastName: z.string().min(2, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'),
  firstName: z.string().min(2, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'),
  middleName: z.string().optional(),
  gender: z.enum(['male', 'female'], { required_error: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª' }),
  birthDate: z
    .string()
    .regex(/^(\d{2})\.(\d{2})\.(\d{4})$/, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
    .refine((dateString) => {
      const [day, month, year] = dateString.split('.').map(Number);
      const birthDate = new Date(year, month - 1, day);
      return birthDate <= minBirthDate;
    }, `–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${MIN_AGE} –ª–µ—Ç`),
  snils: z.string().length(11, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –°–ù–ò–õ–°'),
  birthPlace: z.string().min(2, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è'),
  registrationAddress: z.string().min(2, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–ø–∏—Å–∫–∏'),
  actualAddress: z.string().optional(),
  documentType: z.enum(['passport', 'license'], { required_error: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç' }),
  documentIssuer: z.string().min(2, '–í–≤–µ–¥–∏—Ç–µ –∫–µ–º –≤—ã–¥–∞–Ω'),
  documentCode: z.string().optional(),
  documentSeries: z.string().optional(),
  documentNumber: z.string().optional(),
  documentIssueDate: z
    .string()
    .regex(/^(\d{2})\.(\d{2})\.(\d{4})$/, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'),
  medicalSeries: z.string().optional(),
  medicalNumber: z.string().optional(),
  medicalIssueDate: z
    .string()
    .regex(/^(\d{2})\.(\d{2})\.(\d{4})$/, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'),
  medicalIssuer: z.string().optional(),
  license: z.string().optional(),
  licenseSeries: z.string().optional(),
  licenseNumber: z.string().optional(),
  region: z.string().optional(),
  medicalRestriction: z.string().optional(),
  allowedCategories: z.string().optional(),
  trainingCost: z.string().optional(),
  phone: z.string().min(10, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'),
});

export default function DrivingSchoolForm() {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      lastName: '',
      firstName: '',
      middleName: '',
      gender: 'male',
      birthDate: '',
      snils: '',
      birthPlace: '',
      registrationAddress: '',
      actualAddress: '',
      documentType: 'passport',
      documentIssuer: '',
      documentCode: '',
      documentSeries: '',
      documentNumber: '',
      documentIssueDate: '',
      medicalSeries: '',
      medicalNumber: '',
      medicalIssueDate: '',
      medicalIssuer: '',
      license: '',
      licenseSeries: '',
      licenseNumber: '',
      region: '',
      medicalRestriction: '',
      allowedCategories: '',
      trainingCost: '',
      phone: '',
    },
  });

  function onSubmit(values) {
    console.log(values);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="mx-auto w-full space-y-4">
        <h2 className="text-lg font-semibold">üìã –§–æ—Ä–º–∞ —É—á–µ–Ω–∏–∫–∞ –∞–≤—Ç–æ—à–∫–æ–ª—ã</h2>
        <div className="grid grid-cols-4 gap-4">
          <InputField name="lastName" label="–§–∞–º–∏–ª–∏—è" control={form.control} />
          <InputField name="firstName" label="–ò–º—è" control={form.control} />
          <InputField name="middleName" label="–û—Ç—á–µ—Å—Ç–≤–æ" control={form.control} />
          <DropdownField
            name="gender"
            label="–ü–æ–ª"
            control={form.control}
            options={{ male: '–ú—É–∂—Å–∫–æ–π', female: '–ñ–µ–Ω—Å–∫–∏–π' }}
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <InputField name="birthDate" label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)" control={form.control} />
          <InputField name="snils" label="–°–ù–ò–õ–°" control={form.control} />
        </div>

        <InputField name="birthPlace" label="–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è" control={form.control} />
        <InputField name="registrationAddress" label="–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" control={form.control} />
        <InputField name="actualAddress" label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å" control={form.control} />

        <h3 className="text-md font-semibold">–î–æ–∫—É–º–µ–Ω—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å</h3>
        <div className="grid grid-cols-3 gap-4">
          <DropdownField
            name="documentType"
            label="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            control={form.control}
            options={{ passport: '–ü–∞—Å–ø–æ—Ä—Ç', license: '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ' }}
          />
          <InputField name="documentSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="documentNumber" label="–ù–æ–º–µ—Ä" control={form.control} />
        </div>
        <div className="grid grid-cols-[2fr_1fr_1fr] gap-4">
          <InputField name="documentIssuer" label="–ö–µ–º –≤—ã–¥–∞–Ω" control={form.control} />
          <InputField name="documentCode" label="–ö–æ–¥" control={form.control} />
          <InputField
            name="documentIssueDate"
            label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)"
            control={form.control}
          />
        </div>

        <h3 className="text-md font-semibold">–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞</h3>
        <div className="grid grid-cols-3 gap-4">
          <InputField name="medicalSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="medicalNumber" label="–ù–æ–º–µ—Ä" control={form.control} />
          <InputField
            name="medicalIssueDate"
            label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)"
            control={form.control}
          />
        </div>
        <InputField name="medicalIssuer" label="–ö–µ–º –≤—ã–¥–∞–Ω–∞" control={form.control} />

        <h3 className="text-md font-semibold">–õ–∏—Ü–µ–Ω–∑–∏—è</h3>
        <div className="grid grid-cols-3 gap-4">
          <InputField name="medicalSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="license" label="–ù–æ–º–µ—Ä" control={form.control} />
          <InputField name="region" label="–†–µ–≥–∏–æ–Ω" control={form.control} />
        </div>

        <h3 className="text-md font-semibold">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <div className="grid grid-cols-2 gap-4">
          <InputField name="medicalRestriction" label="–ú–µ–¥. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ" control={form.control} />
          <InputField
            name="allowedCategories"
            label="–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–°"
            control={form.control}
          />
          <InputField name="trainingCost" label="–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è" control={form.control} />
          <InputField name="phone" label="–¢–µ–ª–µ—Ñ–æ–Ω" control={form.control} />
        </div>

        <Button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
      </form>
    </Form>
  );
}

function InputField({ name, label, control }) {
  return (
    <FormField
      name={name}
      control={control}
      render={({ field }) => (
        <FormItem>
          <FormControl>
            <Input placeholder={label} {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

function DropdownField({ name, control, options }) {
  return (
    <FormField
      name={name}
      control={control}
      render={({ field }) => (
        <FormItem>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ" />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {Object.entries(options).map(([value, text]) => (
                <SelectItem key={value} value={value}>
                  {text}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
