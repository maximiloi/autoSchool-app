'use client';

import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useSession } from 'next-auth/react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Form } from '@/components/ui/form';
import InputField from '@/components/ui/InputField';
import DropdownField from '@/components/ui/DropdownField';
import { formSchema } from './formSchema';
import dateParse from '@/lib/dateParse';

export default function StudentForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [activeGroups, setActiveGroups] = useState(null);
  const { data: session, status } = useSession();
  const { toast } = useToast();

  const { reset, ...form } = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      gender: 'male',
      documentType: 'passport',
    },
  });

  useEffect(() => {
    if (status === 'authenticated') {
      async function fetchActiveGroups() {
        try {
          const response = await fetch(`/api/group/`);
          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø');
          const data = await response.json();
          const groups = data.filter((group) => group.isActive);

          setActiveGroups(groups);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø:', error);
          toast({
            title: '–û—à–∏–±–∫–∞',
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.',
            status: 'error',
          });
        }
      }

      fetchActiveGroups();
    }
  }, [session]);

  function creatingActiveGroupObject(data) {
    if (data != null) {
      const result = data.reduce((acc, curr) => {
        acc[curr.id] = curr.groupNumber;
        return acc;
      }, {});
      return result;
    }
  }

  async function onSubmit(values) {
    console.log(values);

    if (status === 'authenticated') {
      setIsLoading(true);
      try {
        const requestData = {
          ...values,
          companyId: session.user.companyId,
          birthDate: dateParse(values.birthDate),
          documentIssueDate: dateParse(values.documentIssueDate),
          medicalIssueDate: dateParse(values.medicalIssueDate),
        };

        const response = await fetch('/api/student', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData),
        });

        if (response.ok) {
          toast({
            duration: 2000,
            description: '–£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î',
          });
          reset();
        } else {
          toast({
            duration: 2000,
            variant: 'destructive',
            description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞',
          });
        }
      } catch (err) {
        toast({
          duration: 2000,
          variant: 'destructive',
          description: `–û—à–∏–±–∫–∞: ${err.message}`,
        });
      } finally {
        setIsLoading(false);
      }
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="mx-auto w-full space-y-4">
        <div className="flex gap-4">
          <h2 className="text-lg font-semibold">üìã –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞. –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É: </h2>
          {activeGroups ? (
            <DropdownField
              name="group"
              label="–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã"
              control={form.control}
              options={creatingActiveGroupObject(activeGroups)}
            />
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          )}
        </div>

        <div className="grid grid-cols-4 gap-4">
          <InputField name="lastName" label="–§–∞–º–∏–ª–∏—è" control={form.control} />
          <InputField name="firstName" label="–ò–º—è" control={form.control} />
          <InputField name="middleName" label="–û—Ç—á–µ—Å—Ç–≤–æ" control={form.control} />
          <DropdownField
            name="gender"
            label="–ü–æ–ª"
            control={form.control}
            options={{ male: '–ú—É–∂—Å–∫–æ–π', female: '–ñ–µ–Ω—Å–∫–∏–π' }}
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <InputField name="birthDate" label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î/–ú–ú/–ì–ì–ì–ì)" control={form.control} />
          <InputField name="snils" label="–°–ù–ò–õ–°" control={form.control} />
        </div>

        <InputField name="birthPlace" label="–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è" control={form.control} />
        <InputField name="registrationAddress" label="–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" control={form.control} />
        <InputField name="actualAddress" label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å" control={form.control} />

        <h3 className="text-md font-semibold">–î–æ–∫—É–º–µ–Ω—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å</h3>
        <div className="grid grid-cols-3 gap-4">
          <DropdownField
            name="documentType"
            label="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            control={form.control}
            options={{ passport: '–ü–∞—Å–ø–æ—Ä—Ç', license: '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ' }}
          />
          <InputField name="documentSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="documentNumber" label="–ù–æ–º–µ—Ä" control={form.control} />
        </div>
        <div className="grid grid-cols-[2fr_1fr_1fr] gap-4">
          <InputField name="documentIssuer" label="–ö–µ–º –≤—ã–¥–∞–Ω" control={form.control} />
          <InputField name="documentCode" label="–ö–æ–¥" control={form.control} />
          <InputField
            name="documentIssueDate"
            label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î/–ú–ú/–ì–ì–ì–ì)"
            control={form.control}
          />
        </div>

        <h3 className="text-md font-semibold">–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞</h3>
        <div className="grid grid-cols-3 gap-4">
          <InputField name="medicalSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="medicalNumber" label="–ù–æ–º–µ—Ä" control={form.control} />
          <InputField
            name="medicalIssueDate"
            label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î/–ú–ú/–ì–ì–ì–ì)"
            control={form.control}
          />
        </div>
        <InputField name="medicalIssuer" label="–ö–µ–º –≤—ã–¥–∞–Ω–∞" control={form.control} />

        <h3 className="text-md font-semibold">–õ–∏—Ü–µ–Ω–∑–∏—è</h3>
        <div className="grid grid-cols-3 gap-4">
          <InputField name="medicalSeries" label="–°–µ—Ä–∏—è" control={form.control} />
          <InputField name="license" label="–ù–æ–º–µ—Ä" control={form.control} />
          <InputField name="region" label="–†–µ–≥–∏–æ–Ω" control={form.control} />
        </div>

        <h3 className="text-md font-semibold">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <div className="grid grid-cols-2 gap-4">
          <InputField name="medicalRestriction" label="–ú–µ–¥. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ" control={form.control} />
          <InputField
            name="allowedCategories"
            label="–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–°"
            control={form.control}
          />
          <InputField name="trainingCost" label="–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è" control={form.control} />
          <InputField name="phone" label="–¢–µ–ª–µ—Ñ–æ–Ω" control={form.control} />
        </div>

        <div className="flex gap-4">
          <Button variant="secondary" disabled={isLoading}>
            {isLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞'}
          </Button>
          <Button type="submit" disabled={isLoading}>
            {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞'}
          </Button>
        </div>
      </form>
    </Form>
  );
}
